import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  GetEWayBillState,
  PostEWayBillState,
  PatchEWayBillState,
  DeleteEWayBillState,
  ClearStateGetEWayBill,
} from '@action/Store/Reducers/Settings/EWayBillSettingsState';
import {
  Box,
  Stack,
  Accordion,
  AccordionDetails,
  AccordionSummary,
  FormGroup,
  FormControlLabel,
} from '@mui/material';

import ToggleSwitch from '@components/ToggleSwitch/ToggleSwitch';
import { EInvoiceForm } from '../EInvoice/EInvoiceForm';
import { EWayBillEdit } from './EWayBillEdit';

import * as css from '../EInvoiceSettingsMain.scss';

const EWayBillData = [
  {
    id: 'e_way_bill',
    headtext: 'E-Way Bill',
    descriptiontext:
      'Before you can connect Effortless with E-Way Bill portal, you need the Username and Password generated by registering Masters India as your GST Suvidha Provider in the E-Way Bill portal.',
    accordion: true,
    key: 'active',
  },
  {
    id: 'e_way_bill_edit',
    headtext: 'Edit E-way bill Threshold',
    descriptiontext:
      'Once you enable edit E-Way Bill Threshold, Invoices bill will be available for E-way Bill generation based on the given threshold amount or Rs. 50,000/- which ever is lower.',
    accordion: true,
    key: 'use_threshold',
  },
  {
    id: 'e_way_bill_testing',
    headtext: 'E-Way bill Testing',
    descriptiontext:
      'Once you enable E-Way bill testing the, dummy eway bill will be generated for your preview. These E-way bill not be sent to E-way bill portal. In-order to push to invoices to E-Way Bill portal you need to switch off this toggle',
    accordion: false,
    key: 'testing_enabled',
  },
];

const EWayBill = () => {
  const device = localStorage.getItem('device_detect');
  const dispatch = useDispatch();
  const { EWayBillState, EWayBillUpdateDataLoad } = useSelector(
    (value) => value.EWayBillSettings
  );

  const [invoiceCheckAction, setInvoiceCheckAction] = useState([]);

  const CheckboxFunction = (id_s, state) => {
    if (id_s === 'e_way_bill' && state) {
      dispatch(PostEWayBillState());
    } else if (id_s === 'e_way_bill' && !state) {
      dispatch(DeleteEWayBillState());
    } else if (id_s === 'e_way_bill_edit') {
      const filterChecked = invoiceCheckAction?.filter(
        (item) => item?.id !== id_s
      );
      setInvoiceCheckAction([...filterChecked, { id: id_s, checked: state }]);
      if (!state) {
        dispatch(
          PatchEWayBillState({
            eWayBillPayload: {
              threshold_limit: 50000,
              use_threshold: true,
            },
          })
        );
      }
    } else if (id_s === 'e_way_bill_testing') {
      const tempKey = EWayBillData?.find((val) => val?.id === id_s)?.key;
      dispatch(PatchEWayBillState({ eWayBillPayload: { [tempKey]: state } }));
    }
  };

  const updateEWayBill = (param) => {
    dispatch(PatchEWayBillState({ eWayBillPayload: param }));
  };

  useEffect(() => {
    dispatch(GetEWayBillState());
    return () => {
      dispatch(ClearStateGetEWayBill());
    };
  }, []);

  useEffect(() => {
    if (EWayBillUpdateDataLoad === 'updated') {
      dispatch(GetEWayBillState());
    }
  }, [EWayBillUpdateDataLoad]);

  useEffect(() => {
    if (Object.keys(EWayBillState || {})?.length > 0) {
      setInvoiceCheckAction([
        { id: 'e_way_bill', checked: EWayBillState?.active },
        {
          id: 'e_way_bill_edit',
          checked:
            (!EWayBillState?.use_threshold ||
              EWayBillState?.threshold_limit !== 50000) &&
            EWayBillState?.active,
        },
        { id: 'e_way_bill_testing', checked: EWayBillState?.testing_enabled },
      ]);
    }
  }, [EWayBillState]);
  return (
    <div
      className={css.ewaybillmod}
      style={{ gap: device === 'mobile' ? 0 : '16px' }}
    >
      {EWayBillData?.map((val) => (
        <Accordion
          className={
            device === 'mobile'
              ? `${css.ewaybillcardmobile} ${css.ewaybillcard}`
              : css.ewaybillcard
          }
          expanded={
            !!invoiceCheckAction?.find((item) => item?.id === val?.id)
              ?.checked && val?.accordion
          }
          key={val?.id}
        >
          <AccordionSummary
            sx={{
              margin: 0,
              padding: device === 'desktop' ? '0 28px 0 16px' : 0,
            }}
          >
            <Stack direction="column" gap="12px" width="100%">
              <Stack
                direction="row"
                alignItems={device === 'mobile' ? 'start' : 'center'}
                width="100%"
                justifyContent="space-between"
              >
                <Stack direction="column" gap="8px" width="85%">
                  <Stack direction="row" alignItems="center" gap="16px">
                    <p className={css.headtext}>{val?.headtext}</p>
                    {Object.values(EWayBillState?.irp_credentials || {})
                      ?.length > 0 &&
                      !EWayBillState?.is_authenticated &&
                      val?.id === 'e_way_bill' &&
                      EWayBillState?.active && (
                        <Box className={css.invalidcredentials}>
                          Invalid Credentials
                        </Box>
                      )}
                  </Stack>
                  {device === 'desktop' && (
                    <p className={css.descriptiontext}>
                      {val?.descriptiontext}
                    </p>
                  )}
                </Stack>
                <FormGroup style={{ alignItems: 'center' }}>
                  <FormControlLabel
                    control={
                      <ToggleSwitch
                        checked={
                          !!invoiceCheckAction?.find(
                            (item) => item?.id === val?.id
                          )?.checked
                        }
                        onClick={(e) => {
                          e?.stopPropagation();
                        }}
                        onChange={(e) =>
                          CheckboxFunction(
                            val?.id,
                            e?.target?.checked,
                            val?.accordion
                          )
                        }
                      />
                    }
                    sx={{
                      margin: 0,

                      '&.Mui-disabled': {
                        cursor: 'not-allowed !important',
                      },
                    }}
                    disabled={
                      val?.id !== 'e_way_bill' &&
                      !invoiceCheckAction?.find(
                        (item) => item?.id === 'e_way_bill'
                      )?.checked
                    }
                  />
                </FormGroup>
              </Stack>
              {device === 'mobile' && (
                <div>
                  <p className={css.descriptiontext}>{val?.descriptiontext}</p>
                </div>
              )}
            </Stack>
          </AccordionSummary>

          <AccordionDetails
            style={{ borderTop: '1px solid #e5e5e5', padding: 16 }}
            onClick={(e) => {
              e?.stopPropagation();
            }}
            key={val?.id}
          >
            {val?.id === 'e_way_bill' && (
              <EInvoiceForm
                formValues={{
                  einvoicedate: EWayBillState?.effective_from,
                  username: EWayBillState?.irp_credentials?.username || '',
                  password: EWayBillState?.irp_credentials?.password || '',
                  clientid: EWayBillState?.irp_credentials?.client_id || '',
                  clientsecret:
                    EWayBillState?.irp_credentials?.client_secret || '',
                }}
                formType={
                  Object.keys(EWayBillState?.irp_credentials || {})?.length > 0
                    ? 'edit'
                    : 'add'
                }
                updateEInvoice={(param) => updateEWayBill(param)}
                invoiceAction={invoiceCheckAction}
              />
            )}
            {val?.id === 'e_way_bill_edit' && (
              <EWayBillEdit
                formValues={{
                  threshold_limit: EWayBillState?.threshold_limit,
                  generate_any: EWayBillState?.use_threshold,
                }}
                formType="edit"
                updateEWayBill={(param) => updateEWayBill(param)}
                invoiceAction={invoiceCheckAction}
              />
            )}
          </AccordionDetails>
        </Accordion>
      ))}
    </div>
  );
};

export default EWayBill;
